{"version":3,"sources":["Organism/Header.jsx","functions/loadModels.js","Atom/WebCam.jsx","Atom/CustomButton.jsx","Molecule/ButtonList.jsx","Molecule/TextList.jsx","Organism/WebCamDetectionSection.jsx","Page/Hub.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","title","subTitle","ghost","loadModels","callback","Promise","all","face","process","then","a","catch","err","console","error","JSON","stringify","WebCam","faceDetection","screenShot","videoContainerRef","useRef","useState","loaded","setLoaded","canvas","takeScreenShot","log","current","getContext","drawImage","width","height","data","toDataURL","resolve","reject","handleUserMedia","useCallback","stream","pause","srcObject","play","getWebCamVideoSource","navigator","getUserMedia","audio","video","handleMediaError","useEffect","interval","setInterval","clearRect","displaySize","withFaceLandmarks","withFaceExpressions","detections","resizedDetections","square","drawDetections","landmarks","drawFaceLandmarks","expression","drawFaceExpressions","clearInterval","style","position","ref","visibility","CustomButton","text","type","onClick","ButtonList","datas","pressedCallBack","map","element","k","key","name","TextList","el","WebCamDetectionSection","faceSquareState","setFaceSquareState","faceLandMarkState","setFaceLandmarkState","faceExpressionState","setFaceExpressionState","handleStateChange","color","backgroundColor","padding","Hub","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.367fc279.chunk.js","sourcesContent":["import React from 'react';\r\nimport { PageHeader } from 'antd';\r\nimport '$css/header.css'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"global-header-style\">\r\n      <PageHeader\r\n      title=\"Face detection\"\r\n      subTitle=\"Face image analysis\"\r\n      ghost={true}\r\n    />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import * as face from 'face-api.js'\r\n\r\nconst loadModels = (callback) => {\r\n    Promise.all([\r\n        face.loadSsdMobilenetv1Model(process.env.PUBLIC_URL+'/models'),\r\n        face.loadTinyFaceDetectorModel(process.env.PUBLIC_URL+'/models'),\r\n        face.loadFaceLandmarkModel(process.env.PUBLIC_URL+'/models'),\r\n        face.loadFaceLandmarkTinyModel(process.env.PUBLIC_URL+'/models'),\r\n        face.loadFaceRecognitionModel(process.env.PUBLIC_URL+'/models'),\r\n        face.loadFaceExpressionModel(process.env.PUBLIC_URL+'/models')\r\n    ]).then(async () => {\r\n       callback()\r\n    }).catch(err => console.error(JSON.stringify(err)))\r\n}\r\n\r\nexport default loadModels","import React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { useRef } from 'react';\r\nimport * as face from 'face-api.js'\r\nimport { useCallback } from 'react';\r\nimport loadModels from '$functions/loadModels.js'\r\n\r\nconst WebCam = ({ faceDetection, screenShot }) => {\r\n\r\n    const videoContainerRef = useRef()\r\n    const [loaded, setLoaded] = useState(false)\r\n    const canvas = useRef()\r\n\r\n    const takeScreenShot = () => {\r\n        console.log('screenShot')\r\n        const ctx = canvas.current.getContext('2d');\r\n        ctx.drawImage(videoContainerRef.current, 0, 0, canvas.current.width, canvas.current.height)\r\n        const data = canvas.current.toDataURL('image/png')\r\n        return new Promise((resolve, reject) => {\r\n            if (data) {\r\n                resolve(data)\r\n            }else {\r\n                reject(\"ERROR\")\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleUserMedia = useCallback(async (stream) => {\r\n\r\n      \r\n        if (!loaded) {\r\n            await videoContainerRef.current.pause()\r\n            loadModels(async () => {\r\n                setLoaded(true)\r\n                videoContainerRef.current.srcObject = stream\r\n                await videoContainerRef.current.play()\r\n            })\r\n        }\r\n    }, [loaded])\r\n\r\n    const handleMediaError = (err) => {\r\n        console.error(err)\r\n    }\r\n    const getWebCamVideoSource = useCallback(() => {\r\n        navigator.getUserMedia({ audio: false, video: { width: 500, height: 500 } }, (stream) => handleUserMedia(stream), (err) => handleMediaError(err))\r\n    }, [handleUserMedia])\r\n\r\n\r\n    useEffect(() => {\r\n       if (screenShot) {\r\n        screenShot(takeScreenShot)\r\n       }\r\n        getWebCamVideoSource()\r\n        let interval;\r\n        if (loaded) {\r\n            interval = setInterval(async () => {\r\n                canvas.current.getContext('2d').clearRect(0, 0, canvas.current.width, canvas.current.height)\r\n\r\n                const displaySize = {\r\n                    width: videoContainerRef.current.width, height: videoContainerRef.current.height\r\n                }\r\n                face.matchDimensions(canvas.current, displaySize)\r\n                const detections = await face.detectAllFaces(videoContainerRef.current, new face.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions()\r\n                const resizedDetections = face.resizeResults(detections, displaySize)\r\n                if (faceDetection.square) {\r\n                    face.draw.drawDetections(canvas.current, resizedDetections)\r\n                }\r\n                if (faceDetection.landmarks) {\r\n                    face.draw.drawFaceLandmarks(canvas.current, resizedDetections)\r\n                }\r\n                if (faceDetection.expression) {\r\n                    face.draw.drawFaceExpressions(canvas.current, resizedDetections)\r\n                }\r\n            }, 100)\r\n            return () => clearInterval(interval)\r\n        }\r\n    }, [loaded, faceDetection, getWebCamVideoSource, screenShot])\r\n    return (\r\n\r\n        <div>\r\n            <canvas width=\"500\" height=\"500\" style={{ position: \"absolute\" }} ref={canvas} ></canvas>\r\n            <video style={{visibility: 'visible'}} width=\"500\" height=\"500\" ref={videoContainerRef} />\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default WebCam;","import React from 'react';\r\nimport { Button } from 'antd';\r\n\r\nconst CustomButton = ({text, type, onClick}) => {\r\n    return ( \r\n        <Button onClick={() => onClick()} type={type}>{text}</Button>\r\n     );\r\n}\r\n \r\nexport default CustomButton;","import React from 'react';\r\nimport {CustomButton} from '@atoms';\r\nimport '$css/buttonList.css'\r\n\r\nconst ButtonList = ({datas, pressedCallBack}) => {\r\n    return (\r\n        <div className='buttonList-global-container'>\r\n            {datas.map((element, k) => <CustomButton key={k} onClick={() => pressedCallBack(element.name)} type={element.type} text={element.text} />)}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ButtonList;","import React from 'react';\r\nimport \"$css/textList.css\"\r\n\r\n\r\nconst TextList = ({datas}) => {\r\n    return ( \r\n       <div className=\"main-text-list-container-style\">\r\n            {datas.map((el) => el )}\r\n       </div>\r\n     );\r\n}\r\n \r\nexport default TextList;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { WebCam } from '@atoms';\r\nimport { ButtonList, TextList } from '@molecules'\r\nimport \"$css/webCamDetectionSection.css\"\r\n\r\n\r\nconst WebCamDetectionSection = () => {\r\n    const [faceSquareState, setFaceSquareState] = useState(true)\r\n    const [faceLandMarkState, setFaceLandmarkState] = useState(false)\r\n    const [faceExpressionState, setFaceExpressionState] = useState(false)\r\n\r\n    const handleStateChange = (name) => {\r\n\r\n        switch (name) {\r\n            case \"face_square\":\r\n                setFaceSquareState(!faceSquareState)\r\n                break;\r\n            case \"face_landmark\":\r\n                setFaceLandmarkState(!faceLandMarkState)\r\n                break;\r\n            case \"face_expression\":\r\n                setFaceExpressionState(!faceExpressionState)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        console.log(name)\r\n    }\r\n    return (\r\n        <div className='webcam-container-style'>\r\n            <WebCam faceDetection={{\r\n                square: faceSquareState,\r\n                landmarks: faceLandMarkState,\r\n                expression: faceExpressionState\r\n            }} />\r\n            <div className=\"propeties-managment-style\">\r\n                <ButtonList datas={[\r\n                    {\r\n                        type: \"primary\",\r\n                        text: \"Face square\",\r\n                        name: \"face_square\"\r\n                    },\r\n                    {\r\n                        type: \"primary\",\r\n                        text: \"Face landmark\",\r\n                        name: \"face_landmark\"\r\n                    },\r\n                    {\r\n                        type: \"primary\",\r\n                        text: \"Face expression\",\r\n                        name: \"face_expression\"\r\n                    }\r\n                ]}\r\n                    pressedCallBack={(name) => handleStateChange(name)}\r\n                />\r\n                <TextList datas={[\r\n                    <p key={\"faceSquareKey\"}>Face squares: <span style={faceSquareState ? { color: \"white\", backgroundColor: 'green', padding: \"5px\" } : { color: \"white\", backgroundColor: 'red', padding: \"5px\" }}>{faceSquareState ? \"Enabled\" : \"Disabled\"}</span></p>,\r\n                    <p key={\"faceLandmarksKey\"}>Face landmarks: <span style={faceLandMarkState ? { color: \"white\", backgroundColor: 'green', padding: \"5px\" } : { color: \"white\", backgroundColor: 'red', padding: \"5px\" }}>{faceLandMarkState ? \"Enabled\" : \"Disabled\"}</span></p>,\r\n                    <p key={\"faceExpressionKey\"}>Face expressions: <span style={faceExpressionState ? { color: \"white\", backgroundColor: 'green', padding: \"5px\" } : { color: \"white\", backgroundColor: 'red', padding: \"5px\" }}>{faceExpressionState ? \"Enabled\" : \"Disabled\"}</span></p>\r\n                ]} />\r\n                {/* <CustomButton onClick={() => setScreenShot(!screenShotChangeHandler)} type='primary' text=\"Take screenshot\" />\r\n                {imgDatas && <img src={imgDatas} />} */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WebCamDetectionSection;","import React from 'react'\r\nimport { Header, WebCamDetectionSection } from '@organism';\r\nimport '$css/hub.css'\r\n\r\n\r\n\r\nconst Hub = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <WebCamDetectionSection />\r\n        </div>);\r\n}\r\n\r\nexport default Hub;","import React from 'react';\r\nimport {Hub} from '@pages';\r\nimport 'antd/dist/antd.css'\r\n\r\nfunction App() {\r\n  return (\r\n   <Hub />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}